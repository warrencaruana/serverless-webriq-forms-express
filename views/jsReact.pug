script.
  var url = url ? url : location.host;
  var webriqFormsApiUrl = "#{apiUrl}forms/"
  var getFormApiUrl = webriqFormsApiUrl + url + "/url";
  var webriqFormsDocsUrl = "#{docsUrl}";
  var postFormApiUrl = "";
  var sitekey = "";
  var dataId = 0;
  var sendingLabelShown = false;
  var isWebriQFormLoaded = true

  webriqFormInit();

  function webriqFormInit() {
    getAjax(getFormApiUrl)
      .then(data => {
        var counter = 1;
        formIds = data;

        var recaptchaDivs = document.querySelectorAll("form[webriq] .webriq-recaptcha");
        recaptchaDivs.forEach(div => {
          if (! div.getAttribute("sitekey")) {
            div.setAttribute("sitekey", formIds[dataId].recaptcha.key);
          }
        });

        if (recaptchaDivs.length) {
          loadRecaptcha(formIds[dataId].recaptcha.key);
        }

        assignFormHandlers(formIds);
      })
      .catch(err => {
        console.error(err);
      });
    localStorage.setItem("lastWebriQRecaptchaId", 0);
  }

  function webriqFormRefresh() {
    getAjax(getFormApiUrl)
      .then(data => {
        var counter = 1;
        formIds = data;

        var recaptchaDivs = document.querySelectorAll("form[webriq] .webriq-recaptcha");
        recaptchaDivs.forEach(div => {
          if (! div.getAttribute("sitekey")) {
            div.setAttribute("sitekey", formIds[dataId].recaptcha.key);
          }
        });

        if (recaptchaDivs.length) {
          renderCaptcha();
        }

        assignFormHandlers(formIds);
      })
      .catch(err => {
        console.error(err);
      });
  }

  function formSubmitHandler(e) {
    e.preventDefault();

    const forms = document.querySelectorAll("form[webriq]");
    const singleForm = e.target;
    const singleFormIndex = Array.from(forms).indexOf(singleForm);
    const nonces = JSON.parse('!{formNonces}');
    const getNonceForFormId = (nonces, formId) => nonces.find(form => form.formId === formId) && nonces.find(form => form.formId === formId).nonce;

    const formId = singleForm.hasAttribute("data-form-id") ? singleForm.getAttribute("data-form-id") : formIds[0] && formIds[0].id;
    const postFormApiUrl = webriqFormsApiUrl + formId + "/submissions";

    // When testing, data-form-id attribute must be specified
    if ( location && location.hostname === "localhost" && ! singleForm.hasAttribute("data-form-id")) {
      console.error(`WebriQ Forms: When testing forms in localhost, make sure to specify the form ID in the form 'data-form-id' attribute. See ${webriqFormsDocsUrl} for more info.`);
      return;
    }

    // Prevents submission to existing form when multiple forms are present
    if (singleFormIndex !== 0 && ! singleForm.hasAttribute("data-form-id") ) {
      console.error(`WebriQ Forms: When using multiple forms in a page, make sure to specify the form ID in the form 'data-form-id' attribute. See ${webriqFormsDocsUrl} for more info.`);
      return;
    }

    var thankYou = location.origin;
    if (singleForm.hasAttribute("data-thankyou-url")) {
      thankYou = singleForm.getAttribute("data-thankyou-url");
    } else {
      thankYou += "/thank-you";
    }

    let infoMessage;
    if (document.querySelectorAll('.infoMessage-' + singleFormIndex).length > 0) {
      infoMessage = document.querySelectorAll('.infoMessage-' + singleFormIndex)[0];
    } else {
      infoMessage = document.createElement("div");
    }

    if (! sendingLabelShown) {
      // Disable submit and show message that form is being submitted
      e.srcElement.querySelectorAll("[type='submit']")[0].disabled = true;

      infoMessage.className = 'infoMessage-' + singleFormIndex;
      infoMessage.style.cssText = 'display: block;background-color:#cce5ff;border-color:#b8daff;margin:10px 0;padding:10px;border-radius:3px;color:#004085;';
      infoMessage.innerHTML = `Sending form data<span id="wait">.</span>`;
      singleForm.before(infoMessage);

      var dots = window.setInterval( function() {
        var wait = document.getElementById("wait");
        if ( wait && wait.innerHTML.length > 2 ) {
          wait.innerHTML = ".";
        } else {
          wait.innerHTML += ".";
        }
      }, 500);
    }

    sendingLabelShown = true;

    postAjax(postFormApiUrl, singleForm, getNonceForFormId(nonces, formId))
      .then(data => {
        singleForm.reset();
        e.srcElement.querySelectorAll("[type='submit']")[0].disabled = false;
        clearInterval(dots);
        infoMessage.innerHTML = `✔ Successfully sent form data! Redirecting<span id='wait'>.</span>`;
        infoMessage.style.cssText = 'display: block;background-color:#d4edda;border-color:#c3e6cb;margin:10px 0;padding:10px;border-radius:3px;color:#155724;';

        var dots2 = window.setInterval( function() {
          var wait = document.getElementById("wait");
          if (wait) {
            if ( wait.innerHTML.length > 2 ) {
              wait.innerHTML = ".";
            } else {
              wait.innerHTML += ".";
            }
          }
        }, 500);

        setTimeout(function() {
          clearInterval(dots2);
          window.location.href = thankYou;
        }, 1500);
      })
      .catch(err => {
        e.srcElement.querySelectorAll("[type='submit']")[0].disabled = false;
        clearInterval(dots);
        sendingLabelShown = false;

        infoMessage.style.cssText = 'display:block;background-color:#ffbaba;margin:10px 0;padding:10px;border-radius:3px;color:#721c24';
        infoMessage.innerHTML = (err && err.message) || `✖ Something went wrong submitting form data! Please <a href="${location && location.href}" style="color: #721c24;font-weight: bold;text-decoration: underline !important;">refresh page and try again...</a>`;

        console.error(err);
      });
  }

  function assignFormHandlers(formIds) {
    var forms = document.querySelectorAll("form[webriq]");

    forms.forEach(function(singleForm, singleFormIndex) {
      singleForm.removeEventListener("submit", formSubmitHandler);
      singleForm.addEventListener("submit", formSubmitHandler);
    });
  }

  function loadRecaptcha(sitekey) {
    if (!document.getElementById("webriqFormRecaptcha")) {
      let scriptTag = document.createElement("script");
      let headTag = document.querySelector("head");
      scriptTag.setAttribute("src", "https://www.google.com/recaptcha/api.js?onload=renderCaptcha&render=explicit");
      scriptTag.setAttribute("async", "");
      scriptTag.setAttribute("defer", "");
      scriptTag.setAttribute("id", "webriqFormRecaptcha");
      headTag.parentNode.insertBefore(scriptTag, headTag.nextSibling);
    }
  }

  function renderCaptcha() {
    var recaptchaDivs = document.querySelectorAll("form[webriq] .webriq-recaptcha");

    recaptchaDivs.forEach(div => {
      // Explicitly call our recaptcha to render back
      var currentSiteKey = div.getAttribute("sitekey");

      if (grecaptcha) {
        let widgetId;
        try {
          widgetId = grecaptcha.render(div, { sitekey: currentSiteKey })
          div.setAttribute("data-recaptcha-id", widgetId);
        } catch(err) {
          grecaptcha.reset(div.getAttribute("data-recaptcha-id"))
        }
      }
    });
  }

  function getAjax(url) {
    return new Promise(function(resolve, reject) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url);
      xhr.onload = function() {
        if (this.status >= 200 && this.status < 300) {
          var response = JSON.parse(xhr.response);
          resolve(response);
        } else {
          reject({ status: this.status, statusText: xhr.statusText });
        }
      };
      xhr.onerror = function() {
        reject({ status: this.status, statusText: xhr.statusText });
      };
      xhr.send();
    });
  }

  function postAjax(url, data, nonce) {
    return new Promise((resolve, reject) => {
      var grepID = data && data.querySelector('.webriq-recaptcha');

      if (grepID && ! grecaptcha.getResponse(grepID.dataset.id || grepID.dataset.recaptchaId).length) {
        reject({ message: `✖ Please check "I'm not a robot" below to submit the form!` });
        return;
      }

      var formData = new FormData(data);
      formData.set("_nonce", nonce);
      var xhr = new XMLHttpRequest();
      xhr.open("POST", url);
      xhr.onload = function() {
        if (this.status === 201) {
          var response = JSON.parse(xhr.response);
          resolve(response);
        } else {
          reject({ status: this.status, statusText: xhr.statusText });
        }
      };
      xhr.onerror = function() {
        reject({ status: this.status, statusText: xhr.statusText });
      };
      xhr.send(formData);
    });
  }
